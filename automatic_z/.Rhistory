coor.pos, patterns[[2]])[[1]], "\"")[[1]][2])
extract.pattern(
coor.pos, patterns[[2]])
coor.pos
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
maf <- paste(readLines(paste(path, '/', filename, sep='')))[5]
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
Positions
maf.sep.pos
maf
maf <- paste(readLines(paste(path, '/', filename, sep='')))[5]
maf
paste(path, '/', filename, sep='')
readLines(paste(path, '/', filename, sep=''))
paste(readLines(paste(path, '/', filename, sep='')))
maf <- readLines(paste(path, '/', filename, sep=''))[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
maf.sep.pos
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
Positions
filename <- "script_3x3_100x_0.maf"
extract.pattern <- function(string, pattern){
return(regmatches(string, gregexpr(pattern, string)))
}
extract.coor <- function(maf.input){
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
return(Positions)
}
extract.coor(paste(path, filename, sep='/'))
extract.coor(paste(path, filename, sep='/'))
extract.coor(paste(path, filename, sep='/'))
extract.coor(paste(path, filename, sep='/'))
test <- extract.coor(paste(path, filename, sep='/'))
test[test$Position==2]
test[test$Position==2, ]
subset.pos <- function(which, positions){
return(positions[positions[["Position"]] == which, ])
}
subset.pos(2, test)
subset.pos <- function(positions, which){
return(positions[positions[["Position"]] == which, ])
}
subset.pos(2, test)
subset.pos(test, 5)
subset.pos(test, 10)
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ return("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
subset.pos(test, 10)
if(which > length(positions[1, ])){ warning("not that much positions!")}
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ warning("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
subset.pos(test, 10)
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
subset.pos(test, 10)
subset.pos(test, 2)
subset.pos(test, 2)$Y
subset.pos(test, 2)[["Y"]]
filename <- "fish_z.csv"
active.z <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = "\t")
active.z
filename <- "args_active_20x.csv"
active.z <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = "\t")
active.z
active <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = "\t")
active
active <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = ",")
active
1.5*37
active
100/75
75/100
1/0.75
1*3/4
19/20
normalizeMetadata <- function(metadata_path,
delimeter = ","){
csv.list <- list.files(path = metadata_path, pattern = ".csv",
recursive = TRUE, full.names = TRUE)
for(csv in csv.list){
line <- readLines(csv, n = 1)
if(grepl("\t", line)){
csv.data <- read.table(file = csv, header = FALSE, sep = "\t")
} else if(grepl(",", line)){
csv.data <- read.table(file = csv, header = FALSE, sep = ",")
} else if(grepl(";", line)){
csv.data <- read.table(file = csv, header = FALSE, sep = ";")
} else {
csv.data <- read.table(file = csv, header = FALSE, sep = " ")
}
write.table(csv.data,
file = csv,
sep = delimeter,
row.names = FALSE,
col.names = FALSE)
}
}
which.coor <- function(file.path.active, file.path.middle, file.path.z){
which.active <- function(file.path){
mapplate <- read.csv(file.path, header = FALSE, sep=',')
yes <- data.frame()
for(i in 1:length(mapplate[, 1])){
for(j in 1:length(mapplate[1, ])){
if(mapplate[i, ][j] == 1){
yes <- rbind(yes, data.frame(row=i, column=j))
}
}
}
return(yes)
}
yes <- which.active(file.path.active)
middle <- read.csv(file.path.middle, header = FALSE, sep=',')
focus <- read.csv(file.path.z, header = FALSE, sep=',')
all.wells <- data.frame()
for(i in 1:length(yes[, 1])){
x <-
unlist(strsplit(as.character(middle[yes$row[i], ][yes$column[i]][[1]]),
'/'))[1]
y <-
unlist(strsplit(as.character(middle[yes$row[i], ][yes$column[i]][[1]]),
'/'))[2]
z <- unlist(focus[yes$row[i], ][yes$column[i]][[1]])
all.wells <- rbind(all.wells, data.frame(x=as.numeric(x),
y=as.numeric(y),
z=as.numeric(z)))
}
return(all.wells)
}
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
filename <- "args_active_20x.csv"
extract.pattern <- function(string, pattern){
return(regmatches(string, gregexpr(pattern, string)))
}
extract.coor <- function(maf.input){
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
return(Positions)
}
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
test <- extract.coor(paste(path, filename, sep='/'))
subset.pos(test, 2)[["Y"]]
subset.pos(test, 2)
paste(path, filename, sep='/')
extract.coor(paste(path, filename, sep='/'))
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
filename <- "args_active_20x.csv"
test <- extract.coor(paste(path, filename, sep='/'))
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
filename <- "args_active_20x.csv"
extract.pattern <- function(string, pattern){
return(regmatches(string, gregexpr(pattern, string)))
}
extract.coor <- function(maf.input){
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
return(Positions)
}
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
test <- extract.coor(paste(path, filename, sep='/'))
subset.pos(test, 2)
active <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = ",")
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
filename <- "args_active_20x.csv"
extract.pattern <- function(string, pattern){
return(regmatches(string, gregexpr(pattern, string)))
}
extract.coor <- function(maf.input){
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
return(Positions)
}
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
test <- extract.coor(paste(path, filename, sep='/'))
subset.pos(test, 2)
active <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = ",")
maf.input=paste(path, filename, sep='/')
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
maf.sep.pos
maf <- readLines(maf.input)[5]
maf
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
filename <- "script_3x3_100x_0.maf"
extract.pattern <- function(string, pattern){
return(regmatches(string, gregexpr(pattern, string)))
}
extract.coor <- function(maf.input){
patterns <- list()
patterns[[1]] <- "<XYZStagePointDefinition"
patterns[[2]] <- "\"(\\d|\\.)*\""
# to have each position as separate element:
maf <- readLines(maf.input)[5]
maf.sep.pos <- strsplit(maf, patterns[[1]])[[1]][-1:-3]
Positions <- as.data.frame(matrix(-1, nrow = length(maf.sep.pos), ncol = 4),
col.names = c("Position", "X", "Y"))
colnames(Positions) <- c("Position", "X", "Y", "Z")
for(pos in (1:length(maf.sep.pos))){
coordinates <- list("Position"=pos, "X"=-1, "Y"=-1, "Z"=-1)
for (axis in c("X", "Y", "Z")){
if ( axis=="Z"){
pattern.pos <- paste(axis, "Position=", patterns[[2]], sep='')
} else {
pattern.pos <- paste("Stage", axis, "Pos=", patterns[[2]], sep='')
}
coor.pos <- extract.pattern(maf.sep.pos[pos], pattern.pos)
exact.pos <- as.numeric(strsplit(extract.pattern(
coor.pos[[1]], patterns[[2]])[[1]], "\"")[[1]][2])
coordinates[[axis]] <- exact.pos
}
Positions[pos, ] <- coordinates
}
return(Positions)
}
subset.pos <- function(positions, which){
if(which > length(positions[1, ])){ stop("not that much positions!")}
return(positions[positions[["Position"]] == which, ])
}
test <- extract.coor(paste(path, filename, sep='/'))
test
subset.pos(test, 2)
filename <- "args_active_20x.csv"
active <- read.table(file = paste(path, filename, sep='/'), header = FALSE, sep = ",")
active
filename <- "args_active_20x.csv"
active <- read.table(file = paste(path, filename, sep='/'),
header = FALSE, sep = ",")
filename <- "args_active_20x.csv"
active <- read.table(file = paste(path, filename, sep='/'),
header = FALSE, sep = ",")
active
log(2)
?write.table
extract.coor(paste(path, filename, sep=''))
filename <- "script_3x3_100x_0.maf"
extract.coor(paste(path, filename, sep=''))
paste(path, filename, sep='')
extract.coor(paste(path, filename, sep='/'))
positions <- extract.coor(paste(path, filename, sep='/'))
positions
filename <- "args_active_20x.csv"
which.active <- function(file.path){
mapplate <- read.csv(file.path, header = FALSE, sep=',')
yes <- data.frame()
for(i in 1:length(mapplate[, 1])){
for(j in 1:length(mapplate[1, ])){
if(mapplate[i, ][j] == 1){
yes <- rbind(yes, data.frame(row=i, column=j))
}
}
}
return(yes)
}
which.active(paste(path, filename, sep='/'))
matrix(0, 12, 12)
data.frame(12, 12)
data.frame
?data.frame
data.frame(matrix(0, 12, 12))
data.frame(matrix(0, 8, 12))
?foreach
active
active <- which.active(paste(path, filename, sep='/'))
active
for(row in active){print(row)}
positions
positions = coord_fixed()
positions <- extract.coor(paste(path, filename, sep='/'))
filename <- "script_3x3_100x_0.maf"
positions <- extract.coor(paste(path, filename, sep='/'))
coor.df <- positions
active
length(active)
length(active[1])
active[1]
active[, 1]
active
active[2]
length(active[1])
length(active[, 1])
(1:length(active[, 1])
)
active[1, ]
coor.df
row
for(row in (1:length(active[, 1]))){
}
row
coor.df[coor.df$Position==row, ]
coor.df[row, ]
(coor.df[row, ]$X, coor.df[row, ]$Y)
c(coor.df[row, ]$X, coor.df[row, ]$Y)
paste(coor.df[row, ]$X, coor.df[row, ]$Y, sep='/')
for(row in (1:length(active[, 1]))){
well <- active[row, ]
xy.df[well[1], well[2]] <- paste(positions.df[row, ]$X,
positions.df[row, ]$Y, sep='/')
}
positions.df = extract.coor(paste(path, filename, sep='/'))
for(row in (1:length(active[, 1]))){
well <- active[row, ]
xy.df[well[1], well[2]] <- paste(positions.df[row, ]$X,
positions.df[row, ]$Y, sep='/')
}
xy.df <- data.frame(matrix(0, 8, 12))
for(row in (1:length(active[, 1]))){
well <- active[row, ]
xy.df[well[1], well[2]] <- paste(positions.df[row, ]$X,
positions.df[row, ]$Y, sep='/')
}
row
(1:length(active[, 1]))
well <- active[row, ]
well
xy.df[well[1], well[2]]
well[1]
well[2]
as.numeric(well[2])
xy.df[as.numeric(well[1]), as.numeric(well[2])] <-
paste(positions.df[row, ]$X, positions.df[row, ]$Y, sep='/')
active <- which.active(paste(path, filename, sep='/'))
xy.df <- data.frame(matrix(0, 8, 12))
for(row in (1:length(active[, 1]))){
well <- active[row, ]
xy.df[as.numeric(well[1]), as.numeric(well[2])] <-
paste(positions.df[row, ]$X, positions.df[row, ]$Y, sep='/')
}
xy.df[as.numeric(well[1]), as.numeric(well[2])]
xy.df
paste(positions.df[row, ]$X, positions.df[row, ]$Y, sep='/')
well <- active[row, ]
well
row
active
filename <- "args_active_20x.csv"
active <- which.active(paste(path, filename, sep='/'))
xy.df <- data.frame(matrix(0, 8, 12))
for(row in (1:length(active[, 1]))){
well <- active[row, ]
xy.df[as.numeric(well[1]), as.numeric(well[2])] <-
paste(positions.df[row, ]$X, positions.df[row, ]$Y, sep='/')
}
xy.df
output.positions <- 'test'
getwd()
path <- "/Users/piotrt/Documents/IPPT_PT/R/RNA-FISH/automatic_z"
setwd()
setwd(path)
output.positions <- 'test.csv'
write.table(xy.df,
file = output.positions,
sep = delimeter,
row.names = FALSE,
col.names = FALSE)
delimeter <- ','
write.table(xy.df,
file = output.positions,
sep = delimeter,
row.names = FALSE,
col.names = FALSE)
positions
